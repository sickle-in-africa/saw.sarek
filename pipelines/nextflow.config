params.sarekDir = '/mnt/lustre/groups/CBBI1243/SADaCC/sequence-analysis-workflows/sarek'


profiles {
    jack_latitude { 
      params.sarekDir = '/home/jackmo/computer/genemap/saw.sarek'
      includeConfig "${params.sarekDir}/conf/jack_latitude.config"
    }
    chpc {
      params.sarekDir = '/mnt/lustre/groups/CBBI1243/SADaCC/sequence-analysis-workflows/sarek'
      includeConfig "${params.sarekDir}/conf/chpc.config"
    }
    chpc_cnode {
      params.sarekDir = '/mnt/lustre/groups/CBBI1243/SADaCC/sequence-analysis-workflows/sarek'
      includeConfig "${params.sarekDir}/conf/chpc_cnode.config"
    }
}

// Return the minimum between requirements and a maximum limit to ensure that resource requirements don't go over
def check_resource(obj) {
    try {
      if (obj.getClass() == nextflow.util.MemoryUnit && obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else if (obj.getClass() == nextflow.util.Duration && obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else if (obj.getClass() == java.lang.Integer)
        return Math.min(obj, params.max_cpus as int)
      else
        return obj
    } catch (all) {
        println "   ### ERROR ###   Max params max_memory:'${params.max_memory}', max_time:'${params.max_time}' or max_cpus:'${params.max_cpus}'  is not valid! Using default value: $obj"
    }
}
